#include <iostream>
#include <fstream>
#include <cassert>
using namespace std;

ifstream fin("roboti.in");
ofstream fout("roboti.out");

int n , m;
int a[1002][1002];
short x[1000005], y[1000005];
int x1 , y1 , x2 , y2;

const int dx[]={0 , 0 , 1 , -1}, dy[]={1 , -1 , 0 , 0};

int main(){
    fin >> n >> m;
    for(int i = 1 ; i <= n ; i ++)
        for(int j = 1 ; j <= m ; j ++)
            fin >> a[i][j];
    assert(fin >> x1 >> y1 >> x2 >> y2);
    assert(a[x1][y1] == 0);
    assert(a[x2][y2] == 0);
    fin.close();
    //facem obstacolele -1
    for(int i = 1 ; i <= n ; i ++)
        for(int j = 1 ; j <= m ; j ++)
            a[i][j] = - a[i][j];
    //bordare cu -1, ca sa nu iesim din matrice
    for(int i = 0 ; i <= n + 1 ; i ++)
        a[i][0] = a[i][m+1] = -1;
    for(int j = 0 ; j <= m + 1; j ++)
        a[0][j] = a[n+1][j] = -1;
    
    int st , dr;
    st = dr = 1;
    x[dr] = x1, y[dr] = y1;
    a[x1][y1] = 1;
    while(st <= dr)
    {
        int i = x[st], j = y[st];
        //cerr << i << " " << j << endl;
        for(int k = 0 ; k < 4 ; k ++)
        {
            int ii = i + dx[k], jj = j + dy[k];
            if(a[ii][jj] == 0)
            {
                a[ii][jj] = a[i][j] + 1;
                dr ++;
                x[dr] = ii, y[dr] = jj;
            }
        }
        st ++;
    }
    /*
    for(int i = 1 ; i <= n ; i ++)
    {
        for(int j = 1 ; j <= m ; j ++)
            cerr << a[i][j] << " " ;
        cerr << endl;
    }
    */
    if(a[x2][y2] == 0)
        fout << -1;
    else
        fout << a[x2][y2] - 1;
    fout.close();
    return 0;
}